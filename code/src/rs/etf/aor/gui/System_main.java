/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * System_main.java
 *
 * Created on 25.09.2010., 12.09.25
 */

package rs.etf.aor.gui;

import java.awt.Graphics;
import java.awt.Point;
import javax.swing.JPanel;
import rs.etf.aor.components.Bus;
import rs.etf.aor.components.Junction;
import rs.etf.aor.components.Line;
import rs.etf.aor.components.Memory;

/**
 *
 * @author MB
 */
public class System_main extends javax.swing.JPanel implements PanelsInfo{

    private String parentTitle = "System_main";
    private JPanel parent;

    //components

    //lines
    Line lines[];
    
    //dots
    private Junction dot1, dot2, dot3, dot4,dot5, 
            dot6, dot7, dot8, dot9, dot10, dot11, dot12;

    // memory
    private Memory memory;

    //bus
    Bus systemDBUS, systemABUS;

    /** Creates new form System_main */
    public System_main(JPanel parent) {

        this.parent = parent;
        initComponents();
        initPictureComponents();
        initLines();
        initBuses();
        connectComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(680, 470));
        setMinimumSize(new java.awt.Dimension(680, 470));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rs/etf/aor/images/systemMain.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    public String getParentTitle() {
        return parentTitle;
    }

    public void refreshSequential() {
        memory.refreshSequential();
    }

    public void clock() {
        memory.clock();
    }

    public void clear() {
    }

    private void initPictureComponents() {
        dot1 = new Junction(4);
        dot2 = new Junction(2);
        dot3 = new Junction(3);
        dot4 = new Junction(2);
        dot5 = new Junction(1);
        dot6 = new Junction(1);
        dot7 = new Junction(1);
        dot8 = new Junction(1);
        dot9 = new Junction(1);
        dot10 = new Junction(1);
        dot11 = new Junction(1);
        dot12 = new Junction(1);

        byte[] mem = MainWindow.memory;
        memory = new Memory(1, mem);
    }

    private void initBuses() {
        systemDBUS = new Bus(8);
        systemABUS = new Bus(16);

        //horizontal DBUS
        systemDBUS.addPoint(new Point(63, 105));
        systemDBUS.addPoint(new Point(659, 105));

        //vertical DBUS to memory
        systemDBUS.addPoint(new Point(195, 105));
        systemDBUS.addPoint(new Point(195, 247));

        //vertical DBUS to CPU
        systemDBUS.addPoint(new Point(537, 105));
        systemDBUS.addPoint(new Point(537, 247));

        //horizontal ABUS
        systemABUS.addPoint(new Point(63, 131));
        systemABUS.addPoint(new Point(659, 131));

        //vertical ABUS to memory
        systemABUS.addPoint(new Point(241, 131));
        systemABUS.addPoint(new Point(241, 247));

        //vertical ABUS to CPU
        systemABUS.addPoint(new Point(586, 131));
        systemABUS.addPoint(new Point(586, 247));

        //add points for text representation of bus value
        systemDBUS.addTextPoint(new Point(85, 103));
        systemABUS.addTextPoint(new Point(85, 129));

        initArrows();

    }

    private void initArrows() {

        // offset = +/- 7
        // length = 11

        //arrows on DBUS
        systemDBUS.addPoint(new Point(195, 105));
        systemDBUS.addPoint(new Point(188, 116));
        systemDBUS.addPoint(new Point(194, 105));
        systemDBUS.addPoint(new Point(187, 116));
        systemDBUS.addPoint(new Point(196, 105));
        systemDBUS.addPoint(new Point(189, 116));

        systemDBUS.addPoint(new Point(195, 105));
        systemDBUS.addPoint(new Point(202, 116));
        systemDBUS.addPoint(new Point(194, 105));
        systemDBUS.addPoint(new Point(201, 116));
        systemDBUS.addPoint(new Point(196, 105));
        systemDBUS.addPoint(new Point(203, 116));

        systemDBUS.addPoint(new Point(195, 247));
        systemDBUS.addPoint(new Point(188, 236));
        systemDBUS.addPoint(new Point(194, 247));
        systemDBUS.addPoint(new Point(187, 236));
        systemDBUS.addPoint(new Point(196, 247));
        systemDBUS.addPoint(new Point(189, 236));

        systemDBUS.addPoint(new Point(195, 247));
        systemDBUS.addPoint(new Point(202, 236));
        systemDBUS.addPoint(new Point(194, 247));
        systemDBUS.addPoint(new Point(201, 236));
        systemDBUS.addPoint(new Point(196, 247));
        systemDBUS.addPoint(new Point(203, 236));

        systemDBUS.addPoint(new Point(537, 105));
        systemDBUS.addPoint(new Point(530, 116));
        systemDBUS.addPoint(new Point(536, 105));
        systemDBUS.addPoint(new Point(529, 116));
        systemDBUS.addPoint(new Point(538, 105));
        systemDBUS.addPoint(new Point(531, 116));

        systemDBUS.addPoint(new Point(537, 105));
        systemDBUS.addPoint(new Point(544, 116));
        systemDBUS.addPoint(new Point(536, 105));
        systemDBUS.addPoint(new Point(543, 116));
        systemDBUS.addPoint(new Point(538, 105));
        systemDBUS.addPoint(new Point(545, 116));

        systemDBUS.addPoint(new Point(537, 247));
        systemDBUS.addPoint(new Point(544, 236));
        systemDBUS.addPoint(new Point(536, 247));
        systemDBUS.addPoint(new Point(543, 236));
        systemDBUS.addPoint(new Point(538, 247));
        systemDBUS.addPoint(new Point(545, 236));

        systemDBUS.addPoint(new Point(537, 247));
        systemDBUS.addPoint(new Point(530, 236));
        systemDBUS.addPoint(new Point(536, 247));
        systemDBUS.addPoint(new Point(529, 236));
        systemDBUS.addPoint(new Point(538, 247));
        systemDBUS.addPoint(new Point(531, 236));

        //arrows on ABUS
        systemABUS.addPoint(new Point(241, 131));
        systemABUS.addPoint(new Point(234, 142));
        systemABUS.addPoint(new Point(240, 131));
        systemABUS.addPoint(new Point(233, 142));
        systemABUS.addPoint(new Point(242, 131));
        systemABUS.addPoint(new Point(235, 142));

        systemABUS.addPoint(new Point(241, 131));
        systemABUS.addPoint(new Point(248, 142));
        systemABUS.addPoint(new Point(240, 131));
        systemABUS.addPoint(new Point(247, 142));
        systemABUS.addPoint(new Point(242, 131));
        systemABUS.addPoint(new Point(249, 142));

        systemABUS.addPoint(new Point(241, 247));
        systemABUS.addPoint(new Point(234, 236));
        systemABUS.addPoint(new Point(240, 247));
        systemABUS.addPoint(new Point(233, 236));
        systemABUS.addPoint(new Point(242, 247));
        systemABUS.addPoint(new Point(235, 236));

        systemABUS.addPoint(new Point(241, 247));
        systemABUS.addPoint(new Point(248, 236));
        systemABUS.addPoint(new Point(240, 247));
        systemABUS.addPoint(new Point(247, 236));
        systemABUS.addPoint(new Point(242, 247));
        systemABUS.addPoint(new Point(249, 236));

        systemABUS.addPoint(new Point(586, 131));
        systemABUS.addPoint(new Point(579, 142));
        systemABUS.addPoint(new Point(585, 131));
        systemABUS.addPoint(new Point(578, 142));
        systemABUS.addPoint(new Point(587, 131));
        systemABUS.addPoint(new Point(580, 142));

        systemABUS.addPoint(new Point(586, 131));
        systemABUS.addPoint(new Point(593, 142));
        systemABUS.addPoint(new Point(585, 131));
        systemABUS.addPoint(new Point(592, 142));
        systemABUS.addPoint(new Point(587, 131));
        systemABUS.addPoint(new Point(594, 142));

        systemABUS.addPoint(new Point(586, 247));
        systemABUS.addPoint(new Point(579, 236));
        systemABUS.addPoint(new Point(585, 247));
        systemABUS.addPoint(new Point(578, 236));
        systemABUS.addPoint(new Point(587, 247));
        systemABUS.addPoint(new Point(580, 236));

        systemABUS.addPoint(new Point(586, 247));
        systemABUS.addPoint(new Point(593, 236));
        systemABUS.addPoint(new Point(585, 247));
        systemABUS.addPoint(new Point(592, 236));
        systemABUS.addPoint(new Point(587, 247));
        systemABUS.addPoint(new Point(594, 236));

    }

    private void initLines() {
        lines = new Line[26];
        for (int i = 0; i < lines.length; i++) {
            lines[i] = new Line(null, 0, 0, 1);
        }

        //RDBUS from CPU
        lines[0].addPoint(new Point(428, 160));
        lines[0].addPoint(new Point(428, 290));
        lines[0].addPoint(new Point(448, 290));

        //RDBUS1 from dot1
        lines[1].addPoint(new Point(428, 160));
        lines[1].addPoint(new Point(659, 160));

        //RDBUS2 from dot1
        lines[2].addPoint(new Point(428, 160));
        lines[2].addPoint(new Point(86, 160));

        //RDBUS1 from dot2
        lines[3].addPoint(new Point(62, 160));
        lines[3].addPoint(new Point(86, 160));

        //RDBUS2 from dot2
        lines[4].addPoint(new Point(86, 160));
        lines[4].addPoint(new Point(86, 290));
        lines[4].addPoint(new Point(105, 290));

        //WRBUS from CPU
        lines[5].addPoint(new Point(414, 191));
        lines[5].addPoint(new Point(414, 314));
        lines[5].addPoint(new Point(448, 314));

        //WRBUS1 from dot3
        lines[6].addPoint(new Point(414, 191));
        lines[6].addPoint(new Point(659, 191));

        //WRBUS2 from dot3
        lines[7].addPoint(new Point(414, 191));
        lines[7].addPoint(new Point(71, 191));

        //WRBUS1 from dot4
        lines[8].addPoint(new Point(62, 191));
        lines[8].addPoint(new Point(71, 191));

        //WRBUS2 from dot4
        lines[9].addPoint(new Point(71, 191));
        lines[9].addPoint(new Point(71, 314));
        lines[9].addPoint(new Point(105, 314));

        //inta1
        lines[10].addPoint(new Point(619, 283));
        lines[10].addPoint(new Point(634, 283));

        //intr1
        lines[11].addPoint(new Point(619, 301));
        lines[11].addPoint(new Point(634, 301));

        //inta2
        lines[12].addPoint(new Point(619, 319));
        lines[12].addPoint(new Point(634, 319));

        //intr2
        lines[13].addPoint(new Point(619, 337));
        lines[13].addPoint(new Point(634, 337));

        //inta3
        lines[14].addPoint(new Point(619, 354));
        lines[14].addPoint(new Point(634, 354));

        //intr3
        lines[15].addPoint(new Point(619, 372));
        lines[15].addPoint(new Point(634, 372));

        //inta1>
        lines[16].addPoint(new Point(627, 279));
        lines[16].addPoint(new Point(634, 283));
        lines[16].addPoint(new Point(627, 287));

        //inta2>
        lines[17].addPoint(new Point(627, 315));
        lines[17].addPoint(new Point(634, 319));
        lines[17].addPoint(new Point(627, 323));

        //inta3>
        lines[18].addPoint(new Point(627, 350));
        lines[18].addPoint(new Point(634, 354));
        lines[18].addPoint(new Point(627, 358));

        //intr1<
        lines[19].addPoint(new Point(626, 297));
        lines[19].addPoint(new Point(619, 301));
        lines[19].addPoint(new Point(626, 305));

        //intr2<
        lines[20].addPoint(new Point(626, 333));
        lines[20].addPoint(new Point(619, 337));
        lines[20].addPoint(new Point(626, 341));

        //intr3<
        lines[21].addPoint(new Point(626, 368));
        lines[21].addPoint(new Point(619, 372));
        lines[21].addPoint(new Point(626, 376));

        //RDBUS from CPU>
        lines[22].addPoint(new Point(424, 167));
        lines[22].addPoint(new Point(428, 160));
        lines[22].addPoint(new Point(432, 167));

        //WRBUS from CPU>
        lines[23].addPoint(new Point(410, 198));
        lines[23].addPoint(new Point(414, 191));
        lines[23].addPoint(new Point(418, 198));

        //RDBUS to MEM>
        lines[24].addPoint(new Point(98, 286));
        lines[24].addPoint(new Point(105, 290));
        lines[24].addPoint(new Point(98, 294));

        //WRBUS to MEM>
        lines[25].addPoint(new Point(98, 310));
        lines[25].addPoint(new Point(105, 314));
        lines[25].addPoint(new Point(98, 318));
    }
    

    private void connectComponents() {
        lines[0].setNextComp(dot1);

        dot1.setLine(lines[2], 0);
        dot1.setLine(lines[3], 1);
        dot1.setLine(lines[22], 2);
        dot1.setLine(lines[1], 3);

        lines[2].setNextComp(dot2);
        dot2.setLine(lines[4], 0);
        dot2.setLine(lines[3], 1);

        lines[4].setNextComp(dot11);
        dot11.setLine(lines[24], 0);

        lines[5].setNextComp(dot3);
        dot3.setLine(lines[6], 0);
        dot3.setLine(lines[7], 1);
        dot3.setLine(lines[23], 2);

        lines[7].setNextComp(dot4);
        dot4.setLine(lines[8], 0);
        dot4.setLine(lines[9], 1);

        lines[9].setNextComp(dot12);
        dot12.setLine(lines[25], 0);

        lines[10].setNextComp(dot5);
        dot5.setLine(lines[16], 0);

        lines[11].setNextComp(dot6);
        dot6.setLine(lines[19], 0);

        lines[12].setNextComp(dot7);
        dot7.setLine(lines[17], 0);

        lines[13].setNextComp(dot8);
        dot8.setLine(lines[20], 0);

        lines[14].setNextComp(dot9);
        dot9.setLine(lines[18], 0);

        lines[15].setNextComp(dot10);
        dot10.setLine(lines[21], 0);

        lines[24].setNextComp(memory);
        lines[24].setNextCompPort(2);

        lines[25].setNextComp(memory);
        lines[25].setNextCompPort(3);

        memory.setLine(systemDBUS, 0);

        systemDBUS.addNextComponent(memory, 1);
        systemABUS.addNextComponent(memory, 0);


    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        for (int i = 0; i < lines.length; i++) {
            lines[i].paint(g);
        }
        systemDBUS.paint(g);
        systemABUS.paint(g);
    }
}
