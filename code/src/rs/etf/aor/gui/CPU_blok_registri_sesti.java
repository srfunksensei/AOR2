/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CPU_blok_registri_sesti.java
 *
 * Created on 22.09.2010., 10.24.46
 */
package rs.etf.aor.gui;

import java.awt.Graphics;
import java.awt.Point;
import javax.swing.JPanel;
import rs.etf.aor.components.*;

/**
 *
 * @author MB
 */
public class CPU_blok_registri_sesti extends javax.swing.JPanel implements PanelsInfo {

    private JPanel parent;
    private String parentTitle = "CPU_organizacija_registri";

    //components
    private Multiplexer mx1, mx2, mx3;
    private Decoder dc1, dc2;
    private And and1, and2;
    private Or or1, or2, or3, or4;
    private TripleStateBuffer buff1;
    private Add add;
    private Selector sel1, sel2, sel3, sel4,
            sel5, sel6, sel7, sel8;

    //lines
    Line lines[];

    //dots
    private Junction dot1, dot2, dot3,
            dot4, dot5, dot6, dot7, dot8;

    //bus
    Bus dbus;

    /** Creates new form CPU_blok_registri_sesti */
    public CPU_blok_registri_sesti(JPanel parent) {
        this.parent = parent;
        initComponents();
        initPictureComponents();
        initLines();
        initBus();
        initComponents();
        connectComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rs/etf/aor/images/CPU_blok_registri_sesti.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private void initBus() {

        dbus = new Bus(16);

        dbus.addPoint(new Point(576, 173));
        dbus.addPoint(new Point(576, 225));
        dbus.addPoint(new Point(576, 217));
        dbus.addPoint(new Point(568, 217));

        dbus.addTextPoint(new Point(580, 180));
    }

    public String getParentTitle() {
        return parentTitle;
    }

    private void initLines() {
        lines = new Line[62];
        for (int i = 0; i < lines.length; i++) {
            lines[i] = new Line(null, 0, 0, 1);
        }

        //GLOBAL
        //daREG
        lines[0].addPoint(new Point(150, 205));
        lines[0].addPoint(new Point(150, 196));//186

        //fdo
        lines[1].addPoint(new Point(360, 56));
        lines[1].addPoint(new Point(355, 56));//350

        //ADDout
        lines[2].addPoint(new Point(309, 378));
        lines[2].addPoint(new Point(312, 378));//316

        //end GLOBAL
        //////////////////////////////////////

        //dareg on mx1 control
        lines[3].addPoint(new Point(150, 186));
        lines[3].addPoint(new Point(150, 196));

        //fdo on or1 in
        lines[4].addPoint(new Point(350, 56));
        lines[4].addPoint(new Point(355, 56));

        //addout on or4 out
        lines[5].addPoint(new Point(316, 378));
        lines[5].addPoint(new Point(312, 378));

        //fvo on or1 in
        lines[6].addPoint(new Point(350, 67));
        lines[6].addPoint(new Point(360, 67));

        //or1 out
        lines[7].addPoint(new Point(330, 61));
        lines[7].addPoint(new Point(319, 61));

        //regdir on and1 in
        lines[8].addPoint(new Point(326, 50));
        lines[8].addPoint(new Point(319, 50));

        //and1 out
        lines[9].addPoint(new Point(295, 56));
        lines[9].addPoint(new Point(282, 56));

        //dareg on or2 in
        lines[10].addPoint(new Point(290, 67));
        lines[10].addPoint(new Point(282, 67));

        //or2 out
        lines[11].addPoint(new Point(260, 61));
        lines[11].addPoint(new Point(252, 61));
        lines[11].addPoint(new Point(252, 80));

        //dc1_0
        lines[12].addPoint(new Point(205, 133));
        lines[12].addPoint(new Point(224, 133));

        //dc1_1
        lines[13].addPoint(new Point(205, 148));
        lines[13].addPoint(new Point(224, 148));

        //dc1_2
        lines[14].addPoint(new Point(205, 163));
        lines[14].addPoint(new Point(224, 163));

        //axsel
        lines[15].addPoint(new Point(285, 95));
        lines[15].addPoint(new Point(300, 95));

        //bxsel
        lines[16].addPoint(new Point(285, 110));
        lines[16].addPoint(new Point(300, 110));

        //cxsel
        lines[17].addPoint(new Point(285, 125));
        lines[17].addPoint(new Point(300, 125));

        //dxsel
        lines[18].addPoint(new Point(285, 140));
        lines[18].addPoint(new Point(300, 140));

        //spsel
        lines[19].addPoint(new Point(285, 155));
        lines[19].addPoint(new Point(300, 155));

        //bpsel
        lines[20].addPoint(new Point(285, 170));
        lines[20].addPoint(new Point(300, 170));

        //sisel
        lines[21].addPoint(new Point(285, 186));
        lines[21].addPoint(new Point(300, 186));

        //disel
        lines[22].addPoint(new Point(285, 201));
        lines[22].addPoint(new Point(300, 201));

        //regout on and2 in
        lines[23].addPoint(new Point(236, 247));
        lines[23].addPoint(new Point(210, 247));
        lines[23].addPoint(new Point(210, 256));
        lines[23].addPoint(new Point(202, 256));

        //fdo on and2 in
        lines[24].addPoint(new Point(209, 262));
        lines[24].addPoint(new Point(202, 262));

        //regind on or3 in
        lines[25].addPoint(new Point(259, 261));
        lines[25].addPoint(new Point(250, 261));

        //regindpom
        lines[26].addPoint(new Point(259, 273));
        lines[26].addPoint(new Point(250, 273));

        //or3 out
        lines[27].addPoint(new Point(229, 268));
        lines[27].addPoint(new Point(202, 268));

        //and2 out
        lines[28].addPoint(new Point(179, 261));
        lines[28].addPoint(new Point(171, 261));
        lines[28].addPoint(new Point(171, 280));

        //dc2_0
        lines[29].addPoint(new Point(124, 333));
        lines[29].addPoint(new Point(142, 333));

        //dc2_1
        lines[30].addPoint(new Point(124, 348));
        lines[30].addPoint(new Point(142, 348));

        //dc2_2
        lines[31].addPoint(new Point(124, 363));
        lines[31].addPoint(new Point(142, 363));

        //bxout2
        lines[32].addPoint(new Point(200, 295));
        lines[32].addPoint(new Point(218, 295));

        //bpout2
        lines[33].addPoint(new Point(200, 310));
        lines[33].addPoint(new Point(218, 310));

        //siout2
        lines[34].addPoint(new Point(200, 325));
        lines[34].addPoint(new Point(218, 325));

        //diout2
        lines[35].addPoint(new Point(200, 340));
        lines[35].addPoint(new Point(218, 340));

        //bx+si
        lines[36].addPoint(new Point(200, 356));
        lines[36].addPoint(new Point(218, 356));

        //bx+di
        lines[37].addPoint(new Point(200, 371));
        lines[37].addPoint(new Point(218, 371));

        //bp+si
        lines[38].addPoint(new Point(200, 386));
        lines[38].addPoint(new Point(218, 386));

        //bp+di
        lines[39].addPoint(new Point(200, 401));
        lines[39].addPoint(new Point(218, 401));

        //bx+si on or4
        lines[40].addPoint(new Point(278, 356));
        lines[40].addPoint(new Point(287, 356));
        lines[40].addPoint(new Point(287, 370));

        //bx+di on or4
        lines[41].addPoint(new Point(278, 373));
        lines[41].addPoint(new Point(288, 373));

        //bp+si on or4
        lines[42].addPoint(new Point(278, 384));
        lines[42].addPoint(new Point(288, 384));

        //bp+di on or4
        lines[43].addPoint(new Point(278, 403));
        lines[43].addPoint(new Point(288, 403));
        lines[43].addPoint(new Point(288, 387));

        //addout on triplebuff
        lines[44].addPoint(new Point(556, 222));
        lines[44].addPoint(new Point(556, 232));

        //ir2_1
        lines[45].addPoint(new Point(375, 314));
        lines[45].addPoint(new Point(394, 314));

        //ir2_0
        lines[46].addPoint(new Point(556, 314));
        lines[46].addPoint(new Point(575, 314));

        //GLOBAL ir2_2..0
        lines[47].addPoint(new Point(103, 125));
        lines[47].addPoint(new Point(112, 125));
        lines[47].setThikness(3);

        //ir2_2..0 on mx1_0 in
        lines[48].addPoint(new Point(112, 125));
        lines[48].addPoint(new Point(121, 125));
        lines[48].setThikness(3);

        //ir2_5..3 on mx1_1 in
        lines[49].addPoint(new Point(103, 170));
        lines[49].addPoint(new Point(121, 170));
        lines[49].setThikness(3);

        //mx1 out
        lines[50].addPoint(new Point(179, 148));
        lines[50].addPoint(new Point(198, 148));
        lines[50].setThikness(3);

        //ir2_2..0 on dc2 in
        lines[51].addPoint(new Point(96, 348));
        lines[51].addPoint(new Point(116, 348));
        lines[51].setThikness(3);

        //bx
        lines[52].addPoint(new Point(409, 360));
        lines[52].addPoint(new Point(409, 342));
        lines[52].setThikness(16);

        //bp
        lines[53].addPoint(new Point(454, 360));
        lines[53].addPoint(new Point(454, 342));
        lines[53].setThikness(16);

        //si
        lines[54].addPoint(new Point(496, 360));
        lines[54].addPoint(new Point(496, 342));
        lines[54].setThikness(16);

        //di
        lines[55].addPoint(new Point(541, 360));
        lines[55].addPoint(new Point(541, 342));
        lines[55].setThikness(16);

        //mx2 out
        lines[56].addPoint(new Point(432, 285));
        lines[56].addPoint(new Point(432, 267));
        lines[56].setThikness(16);

        //mx3 out
        lines[57].addPoint(new Point(518, 285));
        lines[57].addPoint(new Point(518, 267));
        lines[57].setThikness(16);

        //add out
        lines[58].addPoint(new Point(473, 235));
        lines[58].addPoint(new Point(473, 217));
        lines[58].addPoint(new Point(545, 217));
        lines[58].setThikness(16);

    }

    private void initPictureComponents() {
        mx1 = new Multiplexer(1);
        mx2 = new Multiplexer(1);
        mx3 = new Multiplexer(1);
        dc1 = new Decoder(3);
        dc2 = new Decoder(3);
        and1 = new And(2);
        and2 = new And(3);
        or1 = new Or(2);
        or2 = new Or(2);
        or3 = new Or(2);
        or4 = new Or(4);
        add = new Add();
        buff1 = new TripleStateBuffer();
        dot1 = new Junction(2);//dareg
        dot2 = new Junction(2);//fdo
        dot3 = new Junction(2);//addout
        dot4 = new Junction(1);//bx+si
        dot5 = new Junction(1);//bx+di
        dot6 = new Junction(1);//bp+si
        dot7 = new Junction(1);//bp+di
        dot8 = new Junction(2);//ir2_2..0

        sel1 = new Selector(0);//dc1_0
        sel2 = new Selector(1);//dc1_1
        sel3 = new Selector(2);//dc1_2
        sel4 = new Selector(0);//dc2_0
        sel5 = new Selector(1);//dc2_1
        sel6 = new Selector(2);//dc2_2
        sel7 = new Selector(1);//ir2_1
        sel8 = new Selector(0);//ir2_0
    }

    private void connectComponents() {
        lines[0].setNextComp(dot1);
        lines[1].setNextComp(dot2);
        lines[2].setNextComp(dot3);

        dot1.setLine(lines[3], 0);
        dot2.setLine(lines[4], 0);
        dot3.setLine(lines[5], 0);

        lines[3].setNextComp(mx1);
        lines[3].setNextCompPort(2);

        lines[4].setNextComp(or1);
        lines[4].setNextCompPort(0);

        lines[6].setNextComp(or1);
        lines[6].setNextCompPort(1);

        lines[8].setNextComp(and1);
        lines[8].setNextCompPort(0);

        or1.setLine(lines[7], 0);
        lines[7].setNextComp(and1);
        lines[7].setNextCompPort(1);

        and1.setLine(lines[9], 0);
        lines[9].setNextComp(or2);
        lines[9].setNextCompPort(0);

        dot1.setLine(lines[10], 1);
        lines[10].setNextComp(or2);
        lines[10].setNextCompPort(1);

        or2.setLine(lines[11], 0);
        lines[11].setNextComp(dc1);
        lines[11].setNextCompPort(3);

        lines[12].setNextComp(dc1);
        lines[12].setNextCompPort(0);
        lines[13].setNextComp(dc1);
        lines[13].setNextCompPort(1);
        lines[14].setNextComp(dc1);
        lines[14].setNextCompPort(2);

        dc1.setLine(lines[15], 0);
        dc1.setLine(lines[16], 1);
        dc1.setLine(lines[17], 2);
        dc1.setLine(lines[18], 3);
        dc1.setLine(lines[19], 4);
        dc1.setLine(lines[20], 5);
        dc1.setLine(lines[21], 6);
        dc1.setLine(lines[22], 7);

        lines[23].setNextComp(and2);
        lines[23].setNextCompPort(0);

        dot2.setLine(lines[24], 1);
        lines[24].setNextComp(and2);
        lines[24].setNextCompPort(1);

        lines[25].setNextComp(or3);
        lines[25].setNextCompPort(0);
        lines[26].setNextComp(or3);
        lines[26].setNextCompPort(1);

        or3.setLine(lines[27], 0);
        lines[27].setNextComp(and2);
        lines[27].setNextCompPort(2);

        and2.setLine(lines[28], 0);
        lines[28].setNextComp(dc2);
        lines[28].setNextCompPort(3);

        Junction tempJun = new Junction(3);
        Line[] tempLines = new Line[3];
        for (int i=0; i<tempLines.length; i++) {
            tempLines[i] = new Line(null, 0, 0, 1);
        }

        lines[51].setNextComp(tempJun);
        tempJun.setLine(tempLines[0], 0);
        tempJun.setLine(tempLines[1], 1);
        tempJun.setLine(tempLines[2], 2);
        tempLines[0].setNextComp(sel4);
        tempLines[1].setNextComp(sel5);
        tempLines[2].setNextComp(sel6);
        sel4.setLine(lines[29], 0);
        sel5.setLine(lines[30], 0);
        sel6.setLine(lines[31], 0);

        lines[29].setNextComp(dc2);
        lines[29].setNextCompPort(0);
        lines[30].setNextComp(dc2);
        lines[30].setNextCompPort(1);
        lines[31].setNextComp(dc2);
        lines[31].setNextCompPort(2);

        dc2.setLine(lines[32], 0);
        dc2.setLine(lines[33], 1);
        dc2.setLine(lines[34], 2);
        dc2.setLine(lines[35], 3);
        dc2.setLine(lines[36], 4);
        dc2.setLine(lines[37], 5);
        dc2.setLine(lines[38], 6);
        dc2.setLine(lines[39], 7);

        lines[36].setNextComp(dot4);
        lines[37].setNextComp(dot5);
        lines[38].setNextComp(dot6);
        lines[39].setNextComp(dot7);

        dot4.setLine(lines[40], 0);
        dot5.setLine(lines[41], 0);
        dot6.setLine(lines[42], 0);
        dot7.setLine(lines[43], 0);

        lines[40].setNextComp(or4);
        lines[40].setNextCompPort(0);
        lines[41].setNextComp(or4);
        lines[41].setNextCompPort(1);
        lines[42].setNextComp(or4);
        lines[42].setNextCompPort(2);
        lines[43].setNextComp(or4);
        lines[43].setNextCompPort(3);

        or4.setLine(lines[2], 0);

        dot3.setLine(lines[44], 1);
        lines[44].setNextComp(buff1);
        lines[44].setNextCompPort(1);

        lines[47].setNextComp(sel7);
        lines[47].setNextComp(sel8);

        sel7.setLine(lines[45], 0);
        lines[45].setNextComp(mx2);
        lines[45].setNextCompPort(2);

        sel8.setLine(lines[46], 0);
        lines[46].setNextComp(mx3);
        lines[46].setNextCompPort(2);

        buff1.setLine(dbus, 0);

        lines[47].setNextComp(dot8);
        dot8.setLine(lines[48], 0);
        dot8.setLine(lines[51], 1);

        lines[48].setNextComp(mx1);
        lines[48].setNextCompPort(0);
        lines[49].setNextComp(mx1);
        lines[49].setNextCompPort(1);

        mx1.setLine(lines[50], 0);

        tempJun = new Junction(3);
        tempLines = new Line[3];
        for (int i=0; i<tempLines.length; i++) {
            tempLines[i] = new Line(null, 0, 0, 1);
        }
        lines[50].setNextComp(tempJun);
        tempJun.setLine(tempLines[0], 0);
        tempJun.setLine(tempLines[1], 1);
        tempJun.setLine(tempLines[2], 2);
        tempLines[0].setNextComp(sel1);
        tempLines[1].setNextComp(sel2);
        tempLines[2].setNextComp(sel3);
        sel1.setLine(lines[12], 0);
        sel2.setLine(lines[13], 0);
        sel3.setLine(lines[14], 0);

        lines[52].setNextComp(mx2);
        lines[52].setNextCompPort(0);
        lines[53].setNextComp(mx2);
        lines[53].setNextCompPort(1);

        lines[54].setNextComp(mx3);
        lines[54].setNextCompPort(0);
        lines[55].setNextComp(mx3);
        lines[55].setNextCompPort(1);

        mx2.setLine(lines[56], 0);

        mx3.setLine(lines[57], 0);

        lines[56].setNextComp(add);
        lines[56].setNextCompPort(0);
        lines[57].setNextComp(add);
        lines[57].setNextCompPort(1);

        add.setLine(lines[58], 0);

        lines[58].setNextComp(buff1);
        lines[58].setNextCompPort(0);

        tempJun = new Junction(4);
        tempLines = new Line[2];
        for (int i=0; i<tempLines.length; i++) {
            tempLines[i] = new Line(null, 0, 0, 1);
        }
        lines[59].setNextComp(tempJun);
        lines[59].setNextCompPort(0);
        tempJun.setLine(lines[60], 0);
        tempJun.setLine(lines[61], 1);
        tempJun.setLine(tempLines[0], 2);
        tempJun.setLine(tempLines[1], 3);

        Selector ir2_2_0 = new Selector(0, 2);
        lines[60].setNextComp(ir2_2_0);

        Selector ir2_5_3 = new Selector(3, 5);
        lines[61].setNextComp(ir2_5_3);

        lines[59].setThikness(16);
        lines[60].setThikness(16);
        lines[61].setThikness(16);

        ir2_2_0.setLine(lines[47], 0);
        ir2_5_3.setLine(lines[49], 0);

        Selector ir2_0 = new Selector(0);
        tempLines[0].setNextComp(ir2_0);
        ir2_0.setLine(lines[46], 0);

        Selector ir2_1 = new Selector(1);
        tempLines[1].setNextComp(ir2_1);
        ir2_1.setLine(lines[45], 0);

    }

    public void refreshSequential() {
    }

    public void clock() {
    }

    public void clear(){
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        for (int i = 0; i < lines.length; i++) {
            lines[i].paint(g);
        }
        dbus.paint(g);
    }
}
