/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CPU_blok_interfejs_treci.java
 *
 * Created on 22.09.2010., 10.16.50
 */

package rs.etf.aor.gui;

import java.awt.Graphics;
import java.awt.Point;
import javax.swing.JPanel;
import rs.etf.aor.components.*;

/**
 *
 * @author MB
 */
public class CPU_blok_interfejs_treci extends javax.swing.JPanel implements PanelsInfo{

    private JPanel parent;
    private String parentTitle = "CPU_organizacija_interfejs";

    //components
    private And and1, and2, and3;
    private SRFlipFlop sr1, sr2;
    private Coder cd;
    private Decoder dc;
    private InvertedTripleStateBuffer ibuff1;
    private Invertor inv1, inv2, inv3;

    //lines
    Line lines[];

    //dots
    private Junction dot1, dot2, dot3, dot4, dot5, dot6, dot7;
    
    //bus

    /** Creates new form CPU_blok_interfejs_treci */
    public CPU_blok_interfejs_treci(JPanel parent) {
        this.parent = parent;
        initComponents();
        initPictureComponents();
        initLines();
        connectComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rs/etf/aor/images/CPU_blok_interfejs_treci.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    public String getParentTitle() {
        return parentTitle;
    }

    private void initLines() {
        lines = new Line[39];
        for(int i = 0; i<lines.length; i++){
            lines[i] = new Line(null, 0, 0, 1);
        }

        //GLOBAL clk
        lines[0].addPoint(new Point(94, 100));
        lines[0].addPoint(new Point(107, 100));

        //clk1 from dot1
        lines[1].addPoint(new Point(135, 100));
        lines[1].addPoint(new Point(107, 100));

        //clk2 from dot1
        lines[2].addPoint(new Point(107, 100));
        lines[2].addPoint(new Point(107, 172));

        //clk1 from dot2
        lines[3].addPoint(new Point(107, 172));
        lines[3].addPoint(new Point(107, 248));
        lines[3].addPoint(new Point(140, 248));

        //clk2 from dot2
        lines[4].addPoint(new Point(107, 172));
        lines[4].addPoint(new Point(448, 172));
        lines[4].addPoint(new Point(448, 248));
        lines[4].addPoint(new Point(483, 248));

        //brqstart
        lines[5].addPoint(new Point(99, 221));
        lines[5].addPoint(new Point(139, 221));

        //brqstop
        lines[6].addPoint(new Point(119, 274));
        lines[6].addPoint(new Point(139, 274));

        //br
        lines[7].addPoint(new Point(196, 221));
        lines[7].addPoint(new Point(222, 221));

        //br1 from dot3
        lines[8].addPoint(new Point(222, 221));
        lines[8].addPoint(new Point(262, 221));

        //compl br
        lines[9].addPoint(new Point(196, 274));
        lines[9].addPoint(new Point(262, 274));

        //br2 from dot3 == brq3
        lines[10].addPoint(new Point(222, 221));
        lines[10].addPoint(new Point(222, 325));
        lines[10].addPoint(new Point(292, 325));

        //brq2
        lines[11].addPoint(new Point(273, 340));
        lines[11].addPoint(new Point(292, 340));

        //brq1
        lines[12].addPoint(new Point(273, 355));
        lines[12].addPoint(new Point(292, 355));

        //brq0
        lines[13].addPoint(new Point(273, 370));
        lines[13].addPoint(new Point(292, 370));

        //cd0
        lines[14].addPoint(new Point(348, 340));
        lines[14].addPoint(new Point(368, 340));

        //cd1
        lines[15].addPoint(new Point(348, 355));
        lines[15].addPoint(new Point(368, 355));

        //bg0
        lines[16].addPoint(new Point(424, 325));
        lines[16].addPoint(new Point(443, 325));

        //bg1
        lines[17].addPoint(new Point(424, 340));
        lines[17].addPoint(new Point(443, 340));

        //bg2
        lines[18].addPoint(new Point(424, 355));
        lines[18].addPoint(new Point(443, 355));

        //bg3
        lines[19].addPoint(new Point(424, 370));
        lines[19].addPoint(new Point(437, 370));
        lines[19].addPoint(new Point(437, 392));
        lines[19].addPoint(new Point(229, 392));
        lines[19].addPoint(new Point(229, 286));
        lines[19].addPoint(new Point(241, 286));

        //bg3_1 from dot4
        lines[20].addPoint(new Point(241, 286));
        lines[20].addPoint(new Point(241, 233));
        lines[20].addPoint(new Point(262, 233));

        //bg3_2 from dot4
        lines[21].addPoint(new Point(241, 286));
        lines[21].addPoint(new Point(262, 286));

        //bg_out
        lines[22].addPoint(new Point(285, 280));
        lines[22].addPoint(new Point(293, 280));

        //bgr
        lines[23].addPoint(new Point(285, 227));
        lines[23].addPoint(new Point(336, 227));

        //setbusy
        lines[24].addPoint(new Point(359, 222));
        lines[24].addPoint(new Point(482, 222));

        //brqstop
        lines[25].addPoint(new Point(463, 274));
        lines[25].addPoint(new Point(482, 274));

        //busHold
        lines[26].addPoint(new Point(539, 222));
        lines[26].addPoint(new Point(553, 222));

        //busHold1 from dot5
        lines[27].addPoint(new Point(559, 222));
        lines[27].addPoint(new Point(553, 222));

        //busHold2 from dot5
        lines[28].addPoint(new Point(553, 164));
        lines[28].addPoint(new Point(553, 222));

        //busy
        lines[29].addPoint(new Point(570, 159));
        lines[29].addPoint(new Point(575, 159));
        lines[29].addPoint(new Point(575, 142));

        //busy1 from dot6
        lines[30].addPoint(new Point(575, 142));
        lines[30].addPoint(new Point(575, 102));

        //busy1 from dot7
        lines[31].addPoint(new Point(575, 102));
        lines[31].addPoint(new Point(562, 102));

        //busy2 from dot7
        lines[32].addPoint(new Point(575, 102));
        lines[32].addPoint(new Point(603, 102));

        //busy2 from dot6
        lines[33].addPoint(new Point(575, 142));
        lines[33].addPoint(new Point(505, 142));
        lines[33].addPoint(new Point(505, 167));
        lines[33].addPoint(new Point(220, 167));
        lines[33].addPoint(new Point(220, 146));
        lines[33].addPoint(new Point(239, 146));

        //inv1 out
        lines[34].addPoint(new Point(267, 146));
        lines[34].addPoint(new Point(277, 146));

        //inv2 out
        lines[35].addPoint(new Point(304, 146));
        lines[35].addPoint(new Point(314, 146));
        lines[35].addPoint(new Point(314, 216));
        lines[35].addPoint(new Point(333, 216));

        //1
        lines[36].addPoint(new Point(535, 159));
        lines[36].addPoint(new Point(542, 159));

        //E on cd-dc
        lines[37].addPoint(new Point(320, 310));
        lines[37].addPoint(new Point(320, 302));
        lines[37].addPoint(new Point(396, 302));
        lines[37].addPoint(new Point(396, 310));


    }

    private void initPictureComponents() {
        and1 = new And(2);
        and2 = new And(2);
        and3 = new And(2);
        sr1 = new SRFlipFlop(0);
        sr2 = new SRFlipFlop(0);
        cd = new Coder(2);
        dc = new Decoder(2);
        ibuff1 = new InvertedTripleStateBuffer();
        inv1 = new Invertor();
        inv2 = new Invertor();
        inv3 = new Invertor();

        dot1 = new Junction(2);//clk
        dot2 = new Junction(2);//clk
        dot3 = new Junction(2);//br
        dot4 = new Junction(2);//bg3
        dot5 = new Junction(2);//busHold
        dot6 = new Junction(2);//busy
        dot7 = new Junction(2);//busy
    }

    private void connectComponents() {
        lines[0].setNextComp(dot1);
        dot1.setLine(lines[1], 0);
        dot1.setLine(lines[2], 1);

        lines[2].setNextComp(dot2);
        dot2.setLine(lines[3], 0);
        dot2.setLine(lines[4], 1);

        lines[5].setNextComp(sr1);
        lines[5].setNextCompPort(0);
        lines[6].setNextComp(sr1);
        lines[6].setNextCompPort(1);

        sr1.setLine(lines[7], 0);
        sr1.setLine(lines[9], 1);

        lines[7].setNextComp(dot3);
        dot3.setLine(lines[8], 0);
        dot3.setLine(lines[10], 1);

        lines[10].setNextComp(cd);
        lines[10].setNextCompPort(3);
        lines[11].setNextComp(cd);
        lines[11].setNextCompPort(2);
        lines[12].setNextComp(cd);
        lines[12].setNextCompPort(1);
        lines[13].setNextComp(cd);
        lines[13].setNextCompPort(0);

        cd.setLine(lines[14], 0);
        cd.setLine(lines[15], 1);

        lines[14].setNextComp(dc);
        lines[14].setNextCompPort(0);
        lines[15].setNextComp(dc);
        lines[15].setNextCompPort(1);

        dc.setLine(lines[16], 0);
        dc.setLine(lines[17], 1);
        dc.setLine(lines[18], 2);
        dc.setLine(lines[19], 3);

        lines[19].setNextComp(dot4);
        dot4.setLine(lines[20], 0);
        dot4.setLine(lines[21], 1);

        lines[9].setNextComp(and2);
        lines[9].setNextCompPort(0);
        lines[21].setNextComp(and2);
        lines[21].setNextCompPort(1);

        and2.setLine(lines[22], 0);

        lines[8].setNextComp(and1);
        lines[8].setNextCompPort(0);
        lines[20].setNextComp(and1);
        lines[20].setNextCompPort(1);

        and1.setLine(lines[23], 0);

        lines[23].setNextComp(and3);
        lines[23].setNextCompPort(1);

        and3.setLine(lines[24], 0);

        lines[24].setNextComp(sr2);
        lines[24].setNextCompPort(0);
        lines[25].setNextComp(sr2);
        lines[25].setNextCompPort(1);

        sr2.setLine(lines[26], 0);

        lines[26].setNextComp(dot5);
        dot5.setLine(lines[27], 0);
        dot5.setLine(lines[28], 1);

        lines[36].setValue(1);
        lines[36].setNextComp(ibuff1);
        lines[36].setNextCompPort(0);

        lines[28].setNextComp(ibuff1);
        lines[28].setNextCompPort(1);

        ibuff1.setLine(lines[29], 0);

        lines[29].setNextComp(dot6);
        dot6.setLine(lines[30], 0);
        dot6.setLine(lines[33], 1);

        lines[30].setNextComp(dot7);
        dot7.setLine(lines[31], 0);
        dot7.setLine(lines[32], 1);

        lines[33].setNextComp(inv1);
        inv1.setLine(lines[34], 0);

        lines[34].setNextComp(inv2);
        inv2.setLine(lines[35], 0);

        lines[35].setNextComp(inv3);
        lines[35].setNextCompPort(0);
        
        inv3.setLine(lines[38], 0);

        lines[38].setNextComp(and3);
        lines[38].setNextCompPort(0);

        cd.setLine(lines[37], 2);

        lines[37].setNextComp(dc);
        lines[37].setNextCompPort(2);

    }

    public void paint(Graphics g) {
        super.paint(g);
        for (int i = 0; i < lines.length; i++) {
            lines[i].paint(g);
        }
    }

    public void refreshSequential() {
        sr1.refreshSequential();
        sr2.refreshSequential();
    }

    public void clock() {
        sr1.clock();
        sr2.clock();

    }

    public void clear() {
        sr1.setState(0);
        sr2.setState(0);
    }

}
