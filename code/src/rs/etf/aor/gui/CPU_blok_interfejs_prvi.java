/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CPU_blok_interfejs_prvi.java
 *
 * Created on 22.09.2010., 10.15.52
 */

package rs.etf.aor.gui;

import java.awt.Graphics;
import java.awt.Point;
import javax.swing.JPanel;
import rs.etf.aor.components.*;

/**
 *
 * @author MB
 */
public class CPU_blok_interfejs_prvi extends javax.swing.JPanel implements PanelsInfo{

    private JPanel parent;
    private String parentTitle = "CPU_organizacija_interfejs";

    //components
    IncDecRegister mar;
    Register mbr;
    private And and1, and2;
    private Multiplexer mx1, mx2;
    private TripleStateBuffer buff1, buff2, buff3, buff4;

    //lines
    Line lines[];

    //bus
    Bus sbus, dbus, systemDBUS, systemABUS;

    //dots
    private Junction dot1, dot2, dot3;

    //selector
    private Selector sel1, sel2;

    /** Creates new form CPU_blok_interfejs_prvi */
    public CPU_blok_interfejs_prvi(JPanel parent) {
        this.parent = parent;
        initComponents();
        initPictureComponents();
        initLines();
        initBus();
        connectComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rs/etf/aor/images/CPU_blok_interfejs_prvi.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    public String getParentTitle() {
        return parentTitle;
    }

    private void initBus() {

        sbus = new Bus(16);
        dbus = new Bus(16);
        systemDBUS = new Bus(8);
        systemABUS = new Bus(16);

        sbus.addPoint(new Point(119, 58));
        sbus.addPoint(new Point(119, 415));
        sbus.addPoint(new Point(119, 194));
        sbus.addPoint(new Point(362, 194));
        sbus.addPoint(new Point(119, 76));
        sbus.addPoint(new Point(365, 76));
        sbus.addPoint(new Point(365, 76));
        sbus.addPoint(new Point(365, 94));

        dbus.addPoint(new Point(85, 58));
        dbus.addPoint(new Point(85, 415));
        dbus.addPoint(new Point(85, 151));
        dbus.addPoint(new Point(228, 151));
        dbus.addPoint(new Point(228, 397));
        dbus.addPoint(new Point(85, 397));

        systemABUS.addPoint(new Point(554, 58));
        systemABUS.addPoint(new Point(554, 170));
        systemABUS.addPoint(new Point(554, 151));
        systemABUS.addPoint(new Point(525, 151));

        systemDBUS.addPoint(new Point(539, 246));
        systemDBUS.addPoint(new Point(539, 415));
        systemDBUS.addPoint(new Point(539, 265));
        systemDBUS.addPoint(new Point(387, 265));
        systemDBUS.addPoint(new Point(387, 265));
        systemDBUS.addPoint(new Point(387, 283));
        systemDBUS.addPoint(new Point(539, 397));
        systemDBUS.addPoint(new Point(500, 397));

        dbus.addTextPoint(new Point(53, 88));
        sbus.addTextPoint(new Point(123, 88));

        systemABUS.addTextPoint(new Point(558, 88));
        systemDBUS.addTextPoint(new Point(542, 258));

    }

    private void initPictureComponents(){
        mar = new IncDecRegister(0);
        mbr = new Register(0);
        and1 = new And(2);
        and2 = new And(2);
        mx1 = new Multiplexer(1);
        mx2 = new Multiplexer(1);
        buff1 = new TripleStateBuffer();
        buff2 = new TripleStateBuffer();
        buff3 = new TripleStateBufferForMBR();
        buff4 = new TripleStateBuffer();
        dot1 = new Junction(2);
        dot2 = new Junction(2);//mar
        dot3 = new Junction(2);//mbr

        sel1 = new Selector(0, 7);
        sel2 = new Selector(8, 15);

    }

    private void initLines(){
        lines = new Line[25];
        for(int i = 0; i<lines.length; i++){
            lines[i] = new Line(null, 0, 0, 1);
        }

        //incMAR
        lines[0].addPoint(new Point(275, 102));
        lines[0].addPoint(new Point(288, 102));

        //decMAR
        lines[1].addPoint(new Point(277, 125));
        lines[1].addPoint(new Point(288, 125));

        //ldMAR
        lines[2].addPoint(new Point(439, 113));
        lines[2].addPoint(new Point(451, 113));

        //MARout1
        lines[3].addPoint(new Point(464, 187));
        lines[3].addPoint(new Point(471, 187));

        //GLOBAL busHOLD
        lines[4].addPoint(new Point(464, 198));
        lines[4].addPoint(new Point(468, 198));

        //MARout
        lines[5].addPoint(new Point(239, 156));
        lines[5].addPoint(new Point(239, 166));

        //MBRHigh
        lines[6].addPoint(new Point(289, 231));
        lines[6].addPoint(new Point(304, 231));

        //mxMBR
        lines[7].addPoint(new Point(311, 302));
        lines[7].addPoint(new Point(325, 302));

        //ldMBR
        lines[8].addPoint(new Point(273, 360));
        lines[8].addPoint(new Point(288, 360));

        //wr
        lines[9].addPoint(new Point(429, 414));
        lines[9].addPoint(new Point(435, 414));

        //busHOLD
        lines[10].addPoint(new Point(429, 426));
        lines[10].addPoint(new Point(435, 426));

        //MBRout
        lines[11].addPoint(new Point(239, 402));
        lines[11].addPoint(new Point(239, 412));

        //and1out
        lines[12].addPoint(new Point(495, 193));
        lines[12].addPoint(new Point(511, 193));
        lines[12].addPoint(new Point(511, 157));

        //and2out
        lines[13].addPoint(new Point(459, 420));
        lines[13].addPoint(new Point(489, 420));
        lines[13].addPoint(new Point(489, 402));

        //busHold on and1 in
        lines[14].addPoint(new Point(468, 198));
        lines[14].addPoint(new Point(471, 198));

        //marout
        lines[15].addPoint(new Point(364, 133));
        lines[15].addPoint(new Point(364, 151));
        lines[15].setThikness(16);
        lines[15].addTextPoint(new Point(306, 165));

        //marout1 from dot2
        lines[16].addPoint(new Point(364, 151));
        lines[16].addPoint(new Point(252, 151));
        lines[16].setThikness(16);

        //marout2 from dot2
        lines[17].addPoint(new Point(364, 151));
        lines[17].addPoint(new Point(501, 151));
        lines[17].setThikness(16);

        //mx1 out
        lines[18].addPoint(new Point(341, 249));
        lines[18].addPoint(new Point(341, 283));
        lines[18].setThikness(8);

        //mx2 out
        lines[19].addPoint(new Point(363, 321));
        lines[19].addPoint(new Point(363, 340));
        lines[19].setThikness(8);

        //mbrout
        lines[20].addPoint(new Point(363, 381));
        lines[20].addPoint(new Point(363, 397));
        lines[20].setThikness(8);
        lines[20].addTextPoint(new Point(296, 410));

        //mbr out1 from dot3
        lines[21].addPoint(new Point(363, 397));
        lines[21].addPoint(new Point(252, 397));
        lines[21].setThikness(8);

        //mbr out2 from dot3
        lines[22].addPoint(new Point(363, 397));
        lines[22].addPoint(new Point(477, 397));
        lines[22].setThikness(8);

        //MBRHigh
        lines[23].addPoint(new Point(322, 195));
        lines[23].addPoint(new Point(322, 211));
        lines[23].setThikness(8);

        //MBRLow
        lines[24].addPoint(new Point(362, 195));
        lines[24].addPoint(new Point(362, 211));
        lines[24].setThikness(8);

    }

    private void connectComponents(){
        lines[4].setNextComp(dot1);
        dot1.setLine(lines[14], 0);
        dot1.setLine(lines[10], 1);

        //MAR
        lines[0].setNextComp(mar);
        lines[1].setNextComp(mar);
        lines[2].setNextComp(mar);

        lines[0].setNextCompPort(2);
        lines[1].setNextCompPort(3);
        lines[2].setNextCompPort(1);

        mar.setLine(lines[15], 0);

        //and1
        lines[3].setNextComp(and1);
        lines[14].setNextComp(and1);

        lines[3].setNextCompPort(0);
        lines[14].setNextCompPort(1);

        and1.setLine(lines[12], 0);

        //and2
        lines[9].setNextComp(and2);
        lines[10].setNextComp(and2);

        lines[9].setNextCompPort(0);
        lines[10].setNextCompPort(1);

        and2.setLine(lines[13], 0);

        //mx1
        lines[6].setNextComp(mx1);
        lines[6].setNextCompPort(2);
        mx1.setLine(lines[18], 0);

        //mx2
        lines[18].setNextComp(mx2);
        lines[18].setNextCompPort(1);
        lines[7].setNextComp(mx2);
        lines[7].setNextCompPort(2);
        mx2.setLine(lines[19], 0);

        lines[19].addTextPoint(new Point(369, 334));

        //mbr
        lines[19].setNextComp(mbr);
        lines[19].setNextCompPort(0);
        lines[8].setNextComp(mbr);
        lines[8].setNextCompPort(1);
        mbr.setLine(lines[20], 0);

        //tbuff
        lines[5].setNextComp(buff1);
        lines[11].setNextComp(buff3);
        lines[12].setNextComp(buff2);
        lines[13].setNextComp(buff4);

        lines[5].setNextCompPort(1);
        lines[11].setNextCompPort(1);
        lines[12].setNextCompPort(1);
        lines[13].setNextCompPort(1);

        lines[15].setNextComp(dot2);
        dot2.setLine(lines[16], 0);
        dot2.setLine(lines[17], 1);

        lines[16].setNextComp(buff1);
        lines[16].setNextCompPort(0);

        buff1.setLine(dbus, 0);

        lines[17].setNextComp(buff2);
        lines[17].setNextCompPort(0);

        buff2.setLine(systemABUS, 0);

        lines[20].setNextComp(dot3);
        dot3.setLine(lines[21], 0);
        dot3.setLine(lines[22], 1);

        lines[21].setNextComp(buff3);
        lines[21].setNextCompPort(0);

        buff3.setLine(dbus, 0);

        lines[22].setNextComp(buff4);
        lines[22].setNextCompPort(0);

        buff4.setLine(systemDBUS, 0);

        sbus.addNextComponent(sel1, 0);
        sbus.addNextComponent(sel2, 0);
        sbus.addNextComponent(mar, 0);

        sel1.setLine(lines[23], 0);
        sel2.setLine(lines[24], 0);

        lines[23].addTextPoint(new Point(355, 191));
        lines[24].addTextPoint(new Point(276, 207));
        lines[18].addTextPoint(new Point(3457, 259));

        lines[23].setNextComp(mx1);
        lines[23].setNextCompPort(0);

        lines[24].setNextComp(mx1);
        lines[24].setNextCompPort(1);

        systemDBUS.addNextComponent(mx2, 0);

    }


    @Override
    public void paint(Graphics g) {
        super.paint(g);
        for (int i = 0; i < lines.length; i++) {
            lines[i].paint(g);
        }
        sbus.paint(g);
        dbus.paint(g);
        systemDBUS.paint(g);
        systemABUS.paint(g);
    }

    public void refreshSequential() {
        mar.refreshSequential();
        mbr.refreshSequential();
    }

    public void clock() {
        mar.clock();
        mbr.clock();
    }

    public void clear() {
        mar.setState(0);
        mbr.setState(0);
    }

}
