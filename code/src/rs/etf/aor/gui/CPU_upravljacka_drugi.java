/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CPU_upravljacka_drugi.java
 *
 * Created on 22.09.2010., 10.28.31
 */

package rs.etf.aor.gui;

import java.awt.Graphics;
import java.awt.Point;
import javax.swing.JPanel;
import rs.etf.aor.components.DCoutGenerator;
import rs.etf.aor.components.Decoder;
import rs.etf.aor.components.GenSigOp;
import rs.etf.aor.components.GenSigUp;
import rs.etf.aor.components.Junction;
import rs.etf.aor.components.Line;
import rs.etf.aor.components.Selector;

/**
 *
 * @author MB
 */
public class CPU_upravljacka_drugi extends javax.swing.JPanel implements PanelsInfo{

    private JPanel parent;
    private String parentTitle = "CPU_organizacija_main";

    //components
    private Decoder dc;

    //lines
    Line lines[];

    // look at GenSigOp and GenSigUp for line description
    Line opLines[], upLines[];


    //dots
    private Junction dot1, dotPCLow, dotLdMAR, dotLdMBR,
            dot2, dot3, dot4, dot5, dot6, dot7;

    // generates signals for operation unit

    private GenSigOp genSigOp1;
    private GenSigUp genSigUp1;

    Selector selDc0, selDc1, selDc2, selDc3, selDc4, selDc5, selDc6, selDc7;

    DCoutGenerator dcGenerator;
    
    //bus

    /** Creates new form CPU_upravljacka_drugi */
    public CPU_upravljacka_drugi(JPanel parent) {
        this.parent = parent;
        initComponents();
        initPictureComponents();
        initLines();
        initOpLines();
        initUpLines();
        connectComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rs/etf/aor/images/CPU_upravljacka_drugi.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    public String getParentTitle() {
        return parentTitle;
    }

    private void initOpLines()
    {
        opLines = new Line[62];

        for (int i = 0; i < opLines.length; i++)
            opLines[i] = new Line(null, 0, 0, 1);
        
    }

    private void initUpLines(){
        upLines = new Line[12];

        for (int i = 0; i < upLines.length; i++)
            upLines[i] = new Line(null, 0, 0, 1);

    }

    private void initLines() {
        lines = new Line[56];
        for(int i = 0; i<lines.length; i++){
            lines[i] = new Line(null, 0, 0, 1);
        }

        //tff
        lines[0].addPoint(new Point(126, 189));
        lines[0].addPoint(new Point(126, 208));

        //t00
        lines[1].addPoint(new Point(202, 189));
        lines[1].addPoint(new Point(202, 208));

        //ldmar
        lines[2].addPoint(new Point(77, 364));
        lines[2].addPoint(new Point(77, 375));

        //ldmbr
        lines[3].addPoint(new Point(106, 364));
        lines[3].addPoint(new Point(106, 375));

        //ldpc
        lines[4].addPoint(new Point(163, 364));
        lines[4].addPoint(new Point(163, 375));

        //brop
        lines[5].addPoint(new Point(357, 364));
        lines[5].addPoint(new Point(357, 375));

        //bradr
        lines[6].addPoint(new Point(372, 364));
        lines[6].addPoint(new Point(372, 375));

        //branch
        lines[7].addPoint(new Point(387, 364));
        lines[7].addPoint(new Point(387, 375));

        //val00
        lines[8].addPoint(new Point(402, 364));
        lines[8].addPoint(new Point(402, 375));

        //val34
        lines[9].addPoint(new Point(417, 364));
        lines[9].addPoint(new Point(417, 375));

        //val9d
        lines[10].addPoint(new Point(463, 364));
        lines[10].addPoint(new Point(463, 375));

        //l1 = IR1_7
        lines[11].addPoint(new Point(323, 277));
        lines[11].addPoint(new Point(338, 277));

        //l2 = IR1_6
        lines[12].addPoint(new Point(323, 292));
        lines[12].addPoint(new Point(338, 292));

        //l3 = IR1_5
        lines[13].addPoint(new Point(323, 308));
        lines[13].addPoint(new Point(338, 308));

        //Z
        lines[14].addPoint(new Point(323, 353));
        lines[14].addPoint(new Point(338, 353));

        //prekid
        lines[15].addPoint(new Point(482, 277));
        lines[15].addPoint(new Point(497, 277));

        //prcod
        lines[16].addPoint(new Point(482, 292));
        lines[16].addPoint(new Point(497, 292));

        //pradr
        lines[17].addPoint(new Point(482, 353));
        lines[17].addPoint(new Point(497, 353));

        //>l1
        lines[18].addPoint(new Point(331, 273));
        lines[18].addPoint(new Point(338, 277));
        lines[18].addPoint(new Point(331, 281));

        //>l2
        lines[19].addPoint(new Point(331, 288));
        lines[19].addPoint(new Point(338, 292));
        lines[19].addPoint(new Point(331, 296));

        //>l3
        lines[20].addPoint(new Point(331, 304));
        lines[20].addPoint(new Point(338, 308));
        lines[20].addPoint(new Point(331, 312));

        //>Z
        lines[21].addPoint(new Point(331, 349));
        lines[21].addPoint(new Point(338, 353));
        lines[21].addPoint(new Point(331, 357));

        //<prekid
        lines[22].addPoint(new Point(489, 273));
        lines[22].addPoint(new Point(482, 277));
        lines[22].addPoint(new Point(489, 281));

        //<prcod
        lines[23].addPoint(new Point(489, 288));
        lines[23].addPoint(new Point(482, 292));
        lines[23].addPoint(new Point(489, 296));

        //<pradr
        lines[24].addPoint(new Point(489, 349));
        lines[24].addPoint(new Point(482, 353));
        lines[24].addPoint(new Point(489, 357));

        //dc in after dot
        lines[25].addPoint(new Point(164, 105));
        lines[25].addPoint(new Point(164, 150));
        lines[25].setThikness(8);

        lines[25].addTextPoint(new Point(168, 136));

        //dc out (256)
        lines[26].addPoint(new Point(164, 215));
        lines[26].addPoint(new Point(164, 247));
        lines[26].setThikness(256);

        //dc out1 from dot1
        lines[27].addPoint(new Point(164, 247));
        lines[27].addPoint(new Point(119, 247));
        lines[27].addPoint(new Point(119, 265));
        lines[27].setThikness(256);

        //dc out2 from dot1
        lines[28].addPoint(new Point(164, 247));
        lines[28].addPoint(new Point(409, 247));
        lines[28].addPoint(new Point(409, 265));
        lines[28].setThikness(256);

        //l4 = ir2_7
        lines[29].addPoint(new Point(332, 326));
        lines[29].addPoint(new Point(332, 326));

        //l5 = (ir2_7 == 1 && (ir2_6 == 0 || (ir2_1 == 1 && ir2_0 == 0))) == 0
        lines[30].addPoint(new Point(332, 326));
        lines[30].addPoint(new Point(332, 326));

        //MOVD or POP
        lines[31].addPoint(new Point(332, 326));
        lines[31].addPoint(new Point(332, 326));

        //immed
        lines[32].addPoint(new Point(332, 326));
        lines[32].addPoint(new Point(332, 326));

        //regdir
        lines[33].addPoint(new Point(332, 326));
        lines[33].addPoint(new Point(332, 326));

        //regdir or immed
        lines[34].addPoint(new Point(332, 326));
        lines[34].addPoint(new Point(332, 326));
        
    }

    private void initPictureComponents() {
        dc = new Decoder(8);
        dot1 = new Junction(2);
        dotLdMAR = new Junction(1);
        dotLdMBR = new Junction(1);
        dotPCLow = new Junction(1);
        dot2 = new Junction(1);//brop
        dot3 = new Junction(1);//bradr
        dot4 = new Junction(1);//branch
        dot5 = new Junction(1);//val00
        dot6 = new Junction(1);//val34
        dot7 = new Junction(1);//val9d
        genSigOp1 = new GenSigOp(62);
        genSigUp1 = new GenSigUp(12, 12);
        selDc0 = new Selector(0);
        selDc1 = new Selector(1);
        selDc2 = new Selector(2);
        selDc3 = new Selector(3);
        selDc4 = new Selector(4);
        selDc5 = new Selector(5);
        selDc6 = new Selector(6);
        selDc7 = new Selector(7);
        dcGenerator = new DCoutGenerator();
    }

    private void connectComponents() {

        Junction jun = new Junction(11);
        lines[25].setNextComp(jun);
        lines[25].setNextCompPort(0);
        jun.setLine(lines[35], 0);
        jun.setLine(lines[36], 1);
        jun.setLine(lines[37], 2);
        jun.setLine(lines[40], 3);
        jun.setLine(lines[41], 4);
        jun.setLine(lines[42], 5);
        jun.setLine(lines[43], 6);
        jun.setLine(lines[44], 7);
        jun.setLine(lines[45], 8);
        jun.setLine(lines[46], 9);
        jun.setLine(lines[55], 10);

        lines[55].setNextComp(dcGenerator);
        lines[55].setNextCompPort(0);

        lines[35].setNextComp(selDc0);
        lines[35].setNextCompPort(0);

        lines[40].setNextComp(selDc1);
        lines[40].setNextCompPort(0);

        lines[41].setNextComp(selDc2);
        lines[41].setNextCompPort(0);

        lines[42].setNextComp(selDc3);
        lines[42].setNextCompPort(0);

        lines[43].setNextComp(selDc4);
        lines[43].setNextCompPort(0);

        lines[44].setNextComp(selDc5);
        lines[44].setNextCompPort(0);

        lines[45].setNextComp(selDc6);
        lines[45].setNextCompPort(0);

        lines[46].setNextComp(selDc7);
        lines[46].setNextCompPort(0);

        selDc0.setLine(lines[47], 0);
        selDc1.setLine(lines[48], 0);
        selDc2.setLine(lines[49], 0);
        selDc3.setLine(lines[50], 0);
        selDc4.setLine(lines[51], 0);
        selDc5.setLine(lines[52], 0);
        selDc6.setLine(lines[53], 0);
        selDc7.setLine(lines[54], 0);

        dcGenerator.setLine(lines[26], 0);

        for (int i=0; i<8; i++) {
            lines[47+i].setNextComp(dc);
            lines[47+i].setNextCompPort(i);
        }

        lines[36].setNextComp(genSigOp1);
        lines[37].setNextComp(genSigUp1);

        lines[26].setNextComp(dot1);
        dot1.setLine(lines[27], 0);
        dot1.setLine(lines[28], 1);

        dc.setLine(lines[1], 0);
        dc.setLine(lines[0], 255);

        for (int i = 0; i < opLines.length; i++)
            genSigOp1.setLine(opLines[i], i);

        opLines[34].setNextComp(dotPCLow);
        dotPCLow.setLine(lines[4], 0);

        opLines[2].setNextComp(dotLdMAR);
        dotLdMAR.setLine(lines[2], 0);

        opLines[4].setNextComp(dotLdMBR);
        dotLdMBR.setLine(lines[3], 0);

        //genSigUp
        for (int i = 0; i < upLines.length; i++) {
            genSigUp1.setLine(upLines[i], i);
        }

        lines[11].setNextComp(genSigUp1);
        lines[11].setNextCompPort(1);
        lines[12].setNextComp(genSigUp1);
        lines[12].setNextCompPort(2);
        lines[13].setNextComp(genSigUp1);
        lines[13].setNextCompPort(3);
        lines[14].setNextComp(genSigUp1);
        lines[14].setNextCompPort(10);
        lines[15].setNextComp(genSigUp1);
        lines[15].setNextCompPort(11);

        lines[29].setNextComp(genSigUp1);
        lines[29].setNextCompPort(4);
        lines[30].setNextComp(genSigUp1);
        lines[30].setNextCompPort(5);
        lines[31].setNextComp(genSigUp1);
        lines[31].setNextCompPort(6);
        lines[32].setNextComp(genSigUp1);
        lines[32].setNextCompPort(7);
        lines[33].setNextComp(genSigUp1);
        lines[33].setNextCompPort(8);
        lines[34].setNextComp(genSigUp1);
        lines[34].setNextCompPort(9);

        upLines[0].setNextComp(dot2);
        dot2.setLine(lines[5], 0);
        upLines[1].setNextComp(dot3);
        dot3.setLine(lines[6], 0);
        upLines[2].setNextComp(dot4);
        dot4.setLine(lines[7], 0);
        upLines[3].setNextComp(dot5);
        dot5.setLine(lines[8], 0);
        upLines[6].setNextComp(dot6);
        dot6.setLine(lines[9], 0);
        upLines[11].setNextComp(dot7);
        dot7.setLine(lines[10], 0);

    }

    public void refreshSequential() {
    }

    public void clock() {
    }

    public void clear() {
        for (int i=0; i<opLines.length; i++) {
            opLines[i].refreshValue(0);
        }
        for (int i=0; i<upLines.length; i++) {
            upLines[i].refreshValue(0);
        }
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        for (int i = 0; i < lines.length; i++) {
            lines[i].paint(g);
        }
    }

}
