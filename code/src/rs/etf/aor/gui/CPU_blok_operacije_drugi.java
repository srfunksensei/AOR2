/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CPU_blok_operacije_drugi.java
 *
 * Created on 22.09.2010., 10.17.37
 */

package rs.etf.aor.gui;

import java.awt.Graphics;
import java.awt.Point;
import javax.swing.JPanel;
import rs.etf.aor.components.*;

/**
 *
 * @author MB
 */
public class CPU_blok_operacije_drugi extends javax.swing.JPanel implements PanelsInfo{

    private JPanel parent;
    private String parentTitle = "CPU_blok_operacije_prvi";
    
    //components
    private And and1, and2, and3, and4, //3 inputs
            and5, and6, and7, and8; //2 inputs
    private Or or1, or2, //2 inputs
            or3, or4; //3 inputs
    private Nor nor1; //16 inputs
    private Invertor inv1, inv2, inv3, inv4, inv5, inv6;

    //lines
    Line lines[];

    //dots
    private Junction dot1, dot2, dot3, dot4, dot5, dot6, dot7;

    //bus


    /** Creates new form CPU_blok_operacije_drugi */
    public CPU_blok_operacije_drugi(JPanel parent) {
        this.parent = parent;
        initComponents();
        initPictureComponents();
        initLines();
        connectComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rs/etf/aor/images/CPU_blok_operacije_drugi.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    public String getParentTitle() {
        return parentTitle;
    }

    private void initLines() {
        lines = new Line[64];
        for(int i = 0; i<lines.length; i++){
            lines[i] = new Line(null, 0, 0, 1);
        }

        // global lines
        //X15
        lines[0].addPoint(new Point(166, 71));
        lines[0].addPoint(new Point(170, 71)); //174

        //Y15
        lines[1].addPoint(new Point(166, 77));
        lines[1].addPoint(new Point(170, 77));

        //ALU15
        lines[2].addPoint(new Point(432, 77));
        lines[2].addPoint(new Point(487, 77));//544

        //inc
        lines[3].addPoint(new Point(166, 185));
        lines[3].addPoint(new Point(170, 185));

        //dec
        lines[4].addPoint(new Point(166, 241));
        lines[4].addPoint(new Point(170, 241));

        //add
        lines[5].addPoint(new Point(288, 122));
        lines[5].addPoint(new Point(291, 122));//295

        //ALU16
        lines[6].addPoint(new Point(261, 355));
        lines[6].addPoint(new Point(265, 355));//268


        //LINES
        //x15 on and1 in
        lines[7].addPoint(new Point(167, 71));
        lines[7].addPoint(new Point(175, 71));

        //y15 on and1 in
        lines[8].addPoint(new Point(170, 77));
        lines[8].addPoint(new Point(174, 77));

        //N
        lines[9].addPoint(new Point(487, 77));
        lines[9].addPoint(new Point(544, 77));

        //inc on and3 in
        lines[10].addPoint(new Point(170, 185));
        lines[10].addPoint(new Point(174, 185));

        //dec on and4 in
        lines[11].addPoint(new Point(170, 241));
        lines[11].addPoint(new Point(174, 241));

        //add on or1 in
        lines[12].addPoint(new Point(179, 348));
        lines[12].addPoint(new Point(188, 348));

        //alu16 on and 7 in
        lines[13].addPoint(new Point(265, 355));
        lines[13].addPoint(new Point(268, 355));

        //alu15 on and1 in
        lines[14].addPoint(new Point(166, 83));
        lines[14].addPoint(new Point(170, 83));

        //x15 on and2 in
        lines[15].addPoint(new Point(166, 128));
        lines[15].addPoint(new Point(170, 128));

        //y15 on and2 in
        lines[16].addPoint(new Point(166, 134));
        lines[16].addPoint(new Point(170, 134));

        //alu15 on and2 in
        lines[17].addPoint(new Point(166, 140));
        lines[17].addPoint(new Point(174, 140));

        //x15 on and3 in
        lines[18].addPoint(new Point(166, 190));
        lines[18].addPoint(new Point(170, 190));

        //alu15 on and3 in
        lines[19].addPoint(new Point(163, 196));
        lines[19].addPoint(new Point(174, 196));

        //x15 on and4 in
        lines[20].addPoint(new Point(166, 247));
        lines[20].addPoint(new Point(174, 247));

        //alu15 on and4 in
        lines[21].addPoint(new Point(166, 254));
        lines[21].addPoint(new Point(170, 254));

        //and1 out
        lines[22].addPoint(new Point(197, 77));
        lines[22].addPoint(new Point(217, 77));
        lines[22].addPoint(new Point(217, 98));
        lines[22].addPoint(new Point(236, 98));

        //and2 out
        lines[23].addPoint(new Point(197, 133));
        lines[23].addPoint(new Point(217, 133));
        lines[23].addPoint(new Point(217, 110));
        lines[23].addPoint(new Point(236, 110));

        //and3 out
        lines[24].addPoint(new Point(197, 191));
        lines[24].addPoint(new Point(218, 191));
        lines[24].addPoint(new Point(218, 168));
        lines[24].addPoint(new Point(350, 168));

        //and4 out
        lines[25].addPoint(new Point(197, 247));
        lines[25].addPoint(new Point(308, 247));
        lines[25].addPoint(new Point(308, 174));
        lines[25].addPoint(new Point(350, 174));

        //or1 out
        lines[26].addPoint(new Point(257, 104));
        lines[26].addPoint(new Point(276, 104));
        lines[26].addPoint(new Point(276, 111));
        lines[26].addPoint(new Point(295, 111));

        //and5 out
        lines[27].addPoint(new Point(318, 117));
        lines[27].addPoint(new Point(335, 117));
        lines[27].addPoint(new Point(335, 162));
        lines[27].addPoint(new Point(349, 162));

        //V
        lines[28].addPoint(new Point(371, 168));
        lines[28].addPoint(new Point(378, 168));

        //inv->and1
        lines[29].addPoint(new Point(170, 84));
        lines[29].addPoint(new Point(170, 84));

        //inv->and2
        lines[30].addPoint(new Point(170, 128));
        lines[30].addPoint(new Point(170, 128));

        //inv->and2
        lines[31].addPoint(new Point(170, 135));
        lines[31].addPoint(new Point(170, 135));

        //inv->and3
        lines[32].addPoint(new Point(170, 190));
        lines[32].addPoint(new Point(170, 190));

        //inv->and4
        lines[33].addPoint(new Point(170, 254));
        lines[33].addPoint(new Point(170, 254));

        //add on and5 in
        lines[34].addPoint(new Point(288, 122));
        lines[34].addPoint(new Point(295, 122));

        //end of V
        ////////////////////////////////////////////


        //inc on or1 in
        lines[35].addPoint(new Point(179, 338));
        lines[35].addPoint(new Point(188, 338));

        //add
        lines[36].addPoint(new Point(291, 122));
        lines[36].addPoint(new Point(295, 122));

        //dec on and6 in
        lines[37].addPoint(new Point(261, 308));
        lines[37].addPoint(new Point(268, 308));

        //alu16 on and6 in
        lines[38].addPoint(new Point(261, 320));
        lines[38].addPoint(new Point(265, 320));

        //or2 out
        lines[39].addPoint(new Point(209, 344));
        lines[39].addPoint(new Point(268, 344));

        //x0 on and8 in
        lines[40].addPoint(new Point(261, 394));
        lines[40].addPoint(new Point(268, 394));

        //asr on and8 in
        lines[41].addPoint(new Point(261, 404));
        lines[41].addPoint(new Point(268, 404));

        //and6 out
        lines[42].addPoint(new Point(292, 313));
        lines[42].addPoint(new Point(313, 313));
        lines[42].addPoint(new Point(313, 344));
        lines[42].addPoint(new Point(341, 344));

        //and7 out
        lines[43].addPoint(new Point(292, 350));
        lines[43].addPoint(new Point(343, 350));

        //and8 out
        lines[44].addPoint(new Point(292, 399));
        lines[44].addPoint(new Point(313, 399));
        lines[44].addPoint(new Point(313, 355));
        lines[44].addPoint(new Point(341, 355));

        //C
        lines[45].addPoint(new Point(364, 350));
        lines[45].addPoint(new Point(370, 350));

        //inv->and6
        lines[46].addPoint(new Point(265, 320));
        lines[46].addPoint(new Point(265, 320));

        //end of C
        /////////////////////////////////////////


        //alu15 on Z
        lines[47].addPoint(new Point(430, 249));
        lines[47].addPoint(new Point(456, 249));

        //alu0 on Z
        lines[48].addPoint(new Point(430, 284));
        lines[48].addPoint(new Point(456, 284));

        //Z
        lines[49].addPoint(new Point(525, 266));
        lines[49].addPoint(new Point(542, 266));

        //end of Z
        /////////////////////////////////////////
    }

    private void initPictureComponents() {
        and1 = new And(3);
        and2 = new And(3);
        and3 = new And(3);
        and4 = new And(3);
        and5 = new And(2);
        and6 = new And(2);
        and7 = new And(2);
        and8 = new And(2);

        or1 = new Or(2);
        or2 = new Or(2);
        or3 = new Or(3);
        or4 = new Or(3);

        nor1 = new Nor(16);

        inv1 = new Invertor();
        inv2 = new Invertor();
        inv3 = new Invertor();
        inv4 = new Invertor();
        inv5 = new Invertor();
        inv6 = new Invertor();

        dot1 = new Junction(4); //x15
        dot2 = new Junction(2); //y15
        dot3 = new Junction(6); //alu15
        dot4 = new Junction(2); //inc
        dot5 = new Junction(2); //dec
        dot6 = new Junction(3); //add
        dot7 = new Junction(2); //alu16
    }

    private void connectComponents() {
        lines[0].setNextComp(dot1);
        lines[1].setNextComp(dot2);
        lines[2].setNextComp(dot3);
        lines[3].setNextComp(dot4);
        lines[4].setNextComp(dot5);
        lines[5].setNextComp(dot6);
        lines[6].setNextComp(dot7);

        dot1.setLine(lines[7], 0);
        dot2.setLine(lines[8], 0);
        dot3.setLine(lines[9], 0);
        dot4.setLine(lines[10], 0);
        dot5.setLine(lines[11], 0);
        dot6.setLine(lines[12], 0);
        dot7.setLine(lines[13], 0);

        lines[7].setNextComp(and1);
        lines[7].setNextCompPort(0);
        lines[8].setNextComp(and1);
        lines[8].setNextCompPort(1);
        lines[10].setNextComp(and3);
        lines[10].setNextCompPort(0);
        lines[11].setNextComp(and4);
        lines[11].setNextCompPort(0);
        lines[12].setNextComp(or1);
        lines[12].setNextCompPort(1);
        lines[13].setNextComp(and7);
        lines[13].setNextCompPort(1);

        dot3.setLine(lines[14], 1);
        lines[14].setNextComp(inv1);
        inv1.setLine(lines[29], 0);
        lines[29].setNextComp(and1);
        lines[29].setNextCompPort(2);

        dot1.setLine(lines[15], 1);
        lines[15].setNextComp(inv2);
        inv2.setLine(lines[30], 0);
        lines[30].setNextComp(and2);
        lines[30].setNextCompPort(0);

        dot2.setLine(lines[16], 1);
        lines[16].setNextComp(inv3);
        inv3.setLine(lines[31], 0);
        lines[31].setNextComp(and2);
        lines[31].setNextCompPort(1);

        dot3.setLine(lines[17], 2);
        lines[17].setNextComp(and2);
        lines[17].setNextCompPort(2);

        dot1.setLine(lines[18], 2);
        lines[18].setNextComp(inv4);
        inv4.setLine(lines[32], 0);
        lines[32].setNextComp(and3);
        lines[32].setNextCompPort(1);

        dot3.setLine(lines[19], 3);
        lines[19].setNextComp(and3);
        lines[19].setNextCompPort(2);

        dot1.setLine(lines[20], 3);
        lines[20].setNextComp(and3);
        lines[20].setNextCompPort(1);

        dot3.setLine(lines[21], 4);
        lines[21].setNextComp(inv5);
        inv5.setLine(lines[33], 0);
        lines[33].setNextComp(and3);
        lines[33].setNextCompPort(2);

        and1.setLine(lines[22], 0);
        lines[22].setNextComp(or1);
        lines[22].setNextCompPort(0);

        and2.setLine(lines[23], 0);
        lines[23].setNextComp(or1);
        lines[23].setNextCompPort(1);

        and3.setLine(lines[24], 0);
        lines[24].setNextComp(or3);
        lines[24].setNextCompPort(1);

        and4.setLine(lines[25], 0);
        lines[25].setNextComp(or3);
        lines[25].setNextCompPort(2);

        or1.setLine(lines[26], 0);
        lines[26].setNextComp(and5);
        lines[26].setNextCompPort(0);

        and5.setLine(lines[27], 0);
        lines[27].setNextComp(or3);
        lines[27].setNextCompPort(0);

        dot6.setLine(lines[34], 1);
        lines[34].setNextComp(and5);
        lines[34].setNextCompPort(1);

        or3.setLine(lines[28], 0);

        //end of V
        //////////////////////////////


        dot4.setLine(lines[35], 1);
        lines[35].setNextComp(or2);
        lines[35].setNextCompPort(0);

        dot6.setLine(lines[36], 2);
        lines[36].setNextComp(or2);
        lines[36].setNextCompPort(1);

        dot5.setLine(lines[37], 1);
        lines[37].setNextComp(and6);
        lines[37].setNextCompPort(0);

        dot7.setLine(lines[38], 1);
        lines[38].setNextComp(inv6);
        inv6.setLine(lines[46], 0);
        lines[46].setNextComp(and6);
        lines[46].setNextCompPort(1);

        or2.setLine(lines[39], 0);
        lines[39].setNextComp(and7);
        lines[39].setNextCompPort(0);

        lines[40].setNextComp(and8);
        lines[40].setNextCompPort(0);

        lines[41].setNextComp(and8);
        lines[41].setNextCompPort(1);

        and6.setLine(lines[42], 0);
        lines[42].setNextComp(or4);
        lines[42].setNextCompPort(0);

        and7.setLine(lines[43], 0);
        lines[43].setNextComp(or4);
        lines[43].setNextCompPort(1);

        and8.setLine(lines[44], 0);
        lines[44].setNextComp(or4);
        lines[44].setNextCompPort(2);

        or4.setLine(lines[45], 0);

        //end of C
        ///////////////////////////////

        dot3.setLine(lines[47], 5);
        lines[47].setNextComp(nor1);
        lines[47].setNextCompPort(0);

        lines[48].setNextComp(nor1);
        lines[48].setNextCompPort(15);

        lines[50].setNextComp(nor1);
        lines[50].setNextCompPort(1);
        lines[51].setNextComp(nor1);
        lines[51].setNextCompPort(2);
        lines[52].setNextComp(nor1);
        lines[52].setNextCompPort(3);
        lines[53].setNextComp(nor1);
        lines[53].setNextCompPort(4);
        lines[54].setNextComp(nor1);
        lines[54].setNextCompPort(5);
        lines[55].setNextComp(nor1);
        lines[55].setNextCompPort(6);
        lines[56].setNextComp(nor1);
        lines[56].setNextCompPort(7);
        lines[57].setNextComp(nor1);
        lines[57].setNextCompPort(8);
        lines[58].setNextComp(nor1);
        lines[58].setNextCompPort(9);
        lines[59].setNextComp(nor1);
        lines[59].setNextCompPort(10);
        lines[60].setNextComp(nor1);
        lines[60].setNextCompPort(11);
        lines[61].setNextComp(nor1);
        lines[61].setNextCompPort(12);
        lines[62].setNextComp(nor1);
        lines[62].setNextCompPort(13);
        lines[63].setNextComp(nor1);
        lines[63].setNextCompPort(14);

        nor1.setLine(lines[49], 0);

        //end of Z
        /////////////////////////////////
    }


    public void paint(Graphics g) {
        super.paint(g);
        for (int i = 0; i < lines.length; i++) {
            lines[i].paint(g);
        }
    }

    public void refreshSequential() {
    }

    public void clock() {
    }

    public void clear(){
    }
}
